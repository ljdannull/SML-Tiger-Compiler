structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp
  | program of A.exp
  | dec_seq of A.dec list
  | dec of A.dec
  | tydec of A.dec
  | ty of A.ty
  | tyfields of {name: Symbol.symbol, escape: bool ref, typ: Symbol.symbol, pos: int} list
  | tyfield_seq of {name: Symbol.symbol, escape: bool ref, typ: Symbol.symbol, pos: int} list
  | vardec of A.dec
  | fundec of A.dec
  | lvalue of A.var
  | exp_seq of (A.exp * int) list
  | funcparams of A.exp list
  | recordparams of (Symbol.symbol * A.exp * int) list
  | else_clause of A.exp option

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%left THEN DO ELSE OF (*
if at top, then IF exp THEN exp + exp -> IF exp THEN (exp + exp)
if at bottom, then IF exp THEN exp + exp -> (IF exp THEN exp) + exp
*)
%left ASSIGN
%left LT LE GT GE
%left OR
%left AND
%nonassoc EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE


%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				                                    (exp)
dec_seq : dec dec_seq                                   (dec::dec_seq)
 |                                                      ([])
dec : tydec                                             (tydec)
 | vardec                                               (vardec)
 | fundec                                               (fundec)
tydec : TYPE ID EQ ty                                   (A.TypeDec([{name=Symbol.symbol(ID), ty=ty, pos=TYPEleft}]))
ty : ID                                                 (A.NameTy(Symbol.symbol(ID), IDleft))
 | LBRACE tyfields RBRACE                               (A.RecordTy(tyfields))
 | ARRAY OF ID                                          (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))
tyfields : ID COLON ID tyfield_seq                      ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left}::tyfield_seq)
 |                                                      ([])
tyfield_seq : COMMA ID COLON ID tyfield_seq             ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left}::tyfield_seq)
 |                                                      ([])
vardec : VAR ID ASSIGN exp                              (A.VarDec({name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=exp, pos=VARleft}))
 | VAR ID COLON ID ASSIGN exp                           (A.VarDec({name=Symbol.symbol(ID1), escape=ref true, typ=SOME(Symbol.symbol(ID2), ID2left), init=exp, pos=ID1left}))
fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp      (A.FunctionDec([{name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}]))
 | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp   (A.FunctionDec([{name=Symbol.symbol(ID1), params=tyfields, result=SOME(Symbol.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}]))
lvalue : ID                                             (A.SimpleVar(Symbol.symbol(ID), IDleft))
 | lvalue DOT ID                                        (A.FieldVar(lvalue, Symbol.symbol(ID), IDleft))
 | ID LBRACK exp RBRACK                                 (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID), IDleft), exp, LBRACKleft))
 | lvalue LBRACK exp RBRACK                             (A.SubscriptVar(lvalue, exp, LBRACKleft))
exp_seq : SEMICOLON exp exp_seq                         ((exp, expleft)::exp_seq)
 |                                                      ([]) (* this doesn't include the optional semicolon after the last expression *)
funcparams : COMMA exp funcparams                       (exp::funcparams)
 |                                                      ([])
recordparams : COMMA ID EQ exp recordparams             ((Symbol.symbol(ID), exp, IDleft)::recordparams)
 |                                                      ([])
else_clause : ELSE exp                                  (SOME exp)
 |                                                      (NONE)
exp: lvalue                                             (A.VarExp(lvalue))
 | NIL                                                  (A.NilExp)
 | LPAREN exp exp_seq RPAREN                            (A.SeqExp((exp, expleft)::exp_seq))
 | LPAREN RPAREN                                        (A.SeqExp([]))
 | INT                                                  (A.IntExp(INT))
 | MINUS exp                                            (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
 | STRING                                               (A.StringExp(STRING, STRINGleft))
 | ID LPAREN RPAREN                                     (A.CallExp({func=Symbol.symbol(ID), args=[], pos=IDleft}))
 | ID LPAREN exp funcparams RPAREN                      (A.CallExp({func=Symbol.symbol(ID), args=exp::funcparams, pos=IDleft}))
 | exp PLUS exp                                         (A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left}))
 | exp MINUS exp                                        (A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left}))
 | exp TIMES exp                                        (A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left}))
 | exp DIVIDE exp                                       (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left}))
 | exp EQ exp                                           (A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=exp1left}))
 | exp NEQ exp                                          (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left}))
 | exp GT exp                                           (A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=exp1left}))
 | exp LT exp                                           (A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=exp1left}))
 | exp GE exp                                           (A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=exp1left}))
 | exp LE exp                                           (A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=exp1left}))
 | exp AND exp                                          (A.OpExp({left=exp1, oper=A.AndOp, right=exp2, pos=exp1left}))
 | exp OR exp                                           (A.OpExp({left=exp1, oper=A.OrOp, right=exp2, pos=exp1left}))
 | ID LBRACE ID EQ exp recordparams RBRACE              (A.RecordExp({fields=(Symbol.symbol(ID2), exp, ID2left)::recordparams, typ=Symbol.symbol(ID1), pos=ID1left}))
 | ID LBRACE RBRACE                                     (A.RecordExp({fields=[], typ=Symbol.symbol(ID), pos=IDleft}))
 | ID LBRACK exp RBRACK OF exp                          (A.ArrayExp({typ=Symbol.symbol(ID), size=exp1, init=exp2, pos=LBRACKleft}))
 | lvalue ASSIGN exp                                    (A.AssignExp({var=lvalue, exp=exp, pos=lvalueleft}))
 | IF exp THEN exp else_clause                          (A.IfExp({test=exp1, then'=exp2, else'=else_clause, pos=IFleft}))
 | WHILE exp DO exp                                     (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
 | FOR ID ASSIGN exp TO exp DO exp                      (A.ForExp({var=Symbol.symbol(ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
 | BREAK                                                (A.BreakExp(BREAKleft))
 | LET dec_seq IN exp exp_seq END                       (A.LetExp({decs=dec_seq, body=A.SeqExp((exp, expleft)::exp_seq), pos=LETleft}))
 | LPAREN exp RPAREN                                    (A.SeqExp([(exp, expleft)]))

(* IF exp THEN exp + exp *)